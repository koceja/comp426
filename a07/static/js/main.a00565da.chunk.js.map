{"version":3,"sources":["App.js","game.js","index.js"],"names":["game","size","this","board","score","twos","fours","moveListeners","winListeners","loseListeners","won","over","setupNewGame","newBoard","i","generateNum","gameState","direction","win","moved","x","newRow","y","spot","getSpot","push","resultRow","length","getGameState","checkLose","amount","openSpots","rand","Math","floor","random","temp","pop","curr","down","right","result","j","callback","idx","indexOf","splice","Board","props","sqrt","id","map","item","style","flex","alignItems","className","margin","height","display","Container","useState","setGameState","handleKeyPress","e","code","move","updateBoard","newGameState","useEffect","onMove","onWin","onLose","window","addEventListener","removeEventListener","unregisterOnMove","unregisterOnWin","unregisterOnLose","width","float","marginLeft","marginTop","fontWeight","position","textAlign","paddingTop","backgroundColor","color","border","borderRadius","onClick","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a00565da.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Game from './game.js';\n\nconst game = new Game(4);\n\nfunction Board(props) {\n  const board = props.board;\n\n  const size = Math.sqrt(board.length);\n\n  return (\n    <div id=\"board-container\">\n      <div id=\"board\">\n        {board.map(item => (<div style={{flex: `1 0 ${100/size}%`, alignItems: \"center\"}}>\n          <div className={`tile tile-${item}`} style={{margin: \"3px\", height: `${450/size - 6}px`, display: \"flex\"}}><div style={{margin: \"auto\"}}>{(item === 0) ? null: item}</div></div></div>))}\n      </div>\n    </div>\n    \n  )\n}\n\nfunction Container(props) {\n\n  const [gameState, setGameState] = useState(game.getGameState());\n\n  const handleKeyPress = (e) => {\n    let direction = \"\";\n    switch (e.code) {\n      case \"ArrowUp\": \n        direction = \"up\";\n        break;\n        case \"ArrowDown\": \n        direction = \"down\";\n        break;\n        case \"ArrowLeft\": \n        direction = \"left\";\n        break;\n        case \"ArrowRight\": \n        direction = \"right\";\n        break;\n        default:\n          break;\n    }\n    game.move(direction);\n  }\n\n  const updateBoard = (newGameState) => {\n    setGameState({...newGameState});\n  };\n\n  useEffect(() => {\n    game.onMove(updateBoard);\n    game.onWin(updateBoard);\n    game.onLose(updateBoard);\n\n    window.addEventListener('keydown', handleKeyPress);\n    return () => {\n      window.removeEventListener('keydown', handleKeyPress);  \n      game.unregisterOnMove(updateBoard);\n      game.unregisterOnWin(updateBoard);\n      game.unregisterOnLose(updateBoard);\n\n    };\n  })\n\n  const reset = () => {\n    game.setupNewGame();\n    setGameState({...game.getGameState()});\n  };\n\n  return (\n    <div style={{width: \"450px\", margin: \"auto\"}}>\n      <div>\n        <div style={{float: \"right\", marginLeft: \"auto\"}}>\n          <h1 style={{marginTop: \"0px\", fontWeight: \"normal\"}}>Score: {gameState.score}</h1>\n        </div>\n        <h1>2048</h1>\n      </div>\n      <div style={{position: \"relative\"}}>\n      {(gameState.won) ? <div className=\"screen winning\">\n        you won</div>\n        : (gameState.over) ? <div className=\"screen losing\">\n            you lost\n          </div> : null}\n      <Board board={gameState.board} />\n      </div>\n      \n      <div style={{textAlign: \"center\", paddingTop: \"20px\"}}>\n        <button style={{backgroundColor: \"black\", color: \"white\", border: \"1px solid gray\", width: \"100px\", height: \"35px\", fontWeight: \"bold\", borderRadius: \"2px\"}} onClick={reset}>Reset</button>\n\n      </div>\n      <div style={{fontWeight: \"600\"}}>\n        <p>Instructions: Use the arrow keys to move the tiles. Combine neighboring tiles together to try to reach 2048.</p>\n      </div>\n    </div>\n  )\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Container />\n    </div>\n  );\n}\n\nexport default App;\n","/*\nAdd your code for Game here\n*/\n\nexport default class Game {\n    constructor(size) {\n        this.size = size;\n        this.board = [];\n        this.score = 0;\n        this.twos = 0.9;\n        this.fours = 0.1;\n        this.moveListeners = [];\n        this.winListeners = [];\n        this.loseListeners = [];\n        this.won = false;\n        this.over = false;\n\n        this.setupNewGame();\n    }\n\n    setupNewGame() {\n        const newBoard = [];\n        for (let i = 0; i < this.size * this.size; i++) {\n            newBoard[i] = 0;\n        }\n        this.generateNum(newBoard, 2);\n        this.board = newBoard;\n        this.won = false;\n        this.over = false;\n        this.score = 0;\n    }\n\n    loadGame(gameState) {\n        this.board = gameState.board;\n        this.score = gameState.score;\n        this.won = gameState.won;\n        this.over = gameState.over;\n    }\n\n    move(direction) {\n        const board = this.board;\n        let win = false;\n        let moved = false;\n        switch (direction) {\n            case 'up':\n                for (let x = 0; x < this.size; x++) {\n                    const newRow = [];\n                    for (let y = 0; y < this.size; y++) {\n                        const spot = this.getSpot(x, y);\n                        if (board[spot] !== 0) {\n                            newRow.push(board[spot]);\n                        }\n                    }\n                    const resultRow = [];\n                    for (let i = 0; i < newRow.length; i++) {\n                        if (i === 0) {\n                            resultRow.push(newRow[i]);\n                        } else if (newRow[i] === newRow[i - 1]) {\n                            this.score += newRow[i] * 2;\n                            if (newRow[i] * 2 === 2048) {\n                                win = true;\n                            }\n                            resultRow[resultRow.length - 1] = newRow[i] * 2;\n                            newRow[i] = 0;\n                        } else {\n                            resultRow.push(newRow[i]);\n                        }\n                    }\n\n                    while (resultRow.length < this.size) {\n                        resultRow.push(0);\n                    }\n                    for (let i = 0; i < this.size; i++) {\n                        const spot = this.getSpot(x, i);\n                        if (resultRow[i] !== board[spot]) {\n                            moved = true;\n                        }\n                        board[spot] = resultRow[i];\n                    }\n                }\n                break;\n            case 'down':\n                for (let x = 0; x < this.size; x++) {\n                    const newRow = [];\n                    for (let y = this.size - 1; y >= 0; y--) {\n                        const spot = this.getSpot(x, y);\n                        if (board[spot] !== 0) {\n                            newRow.push(board[spot]);\n                        }\n                    }\n                    const resultRow = [];\n                    for (let i = 0; i < newRow.length; i++) {\n                        if (i === 0) {\n                            resultRow.push(newRow[i]);\n                        } else if (newRow[i] === newRow[i - 1]) {\n                            this.score += newRow[i] * 2;\n                            if (newRow[i] * 2 === 2048) {\n                                win = true;\n                            }\n                            resultRow[resultRow.length - 1] = newRow[i] * 2;\n                            newRow[i] = 0;\n                        } else {\n                            resultRow.push(newRow[i]);\n                        }\n                    }\n\n                    while (resultRow.length < this.size) {\n                        resultRow.push(0);\n                    }\n                    for (let i = 0; i < this.size; i++) {\n                        const spot = this.getSpot(x, this.size - i - 1);\n                        if (resultRow[i] !== board[spot]) {\n                            moved = true;\n                        }\n                        board[spot] = resultRow[i];\n                    }\n                }\n                break;\n            case 'left':\n                for (let y = 0; y < this.size; y++) {\n                    const newRow = [];\n                    for (let x = 0; x < this.size; x++) {\n                        const spot = this.getSpot(x, y);\n                        if (board[spot] !== 0) {\n                            newRow.push(board[spot]);\n                        }\n                    }\n                    const resultRow = [];\n                    for (let i = 0; i < newRow.length; i++) {\n                        if (i === 0) {\n                            resultRow.push(newRow[i]);\n                        } else if (newRow[i] === newRow[i - 1]) {\n                            this.score += newRow[i] * 2;\n                            if (newRow[i] * 2 === 2048) {\n                                win = true;\n                            }\n                            resultRow[resultRow.length - 1] = newRow[i] * 2;\n                            newRow[i] = 0;\n                        } else {\n                            resultRow.push(newRow[i]);\n                        }\n                    }\n\n                    while (resultRow.length < this.size) {\n                        resultRow.push(0);\n                    }\n                    for (let i = 0; i < this.size; i++) {\n                        const spot = this.getSpot(i, y);\n                        if (resultRow[i] !== board[spot]) {\n                            moved = true;\n                        }\n                        board[spot] = resultRow[i];\n                    }\n                }\n                break;\n            case 'right':\n                for (let y = 0; y < this.size; y++) {\n                    const newRow = [];\n                    for (let x = this.size - 1; x >= 0; x--) {\n                        const spot = this.getSpot(x, y);\n                        if (board[spot] !== 0) {\n                            newRow.push(board[spot]);\n                        }\n                    }\n                    const resultRow = [];\n                    for (let i = 0; i < newRow.length; i++) {\n                        if (i === 0) {\n                            resultRow.push(newRow[i]);\n                        } else if (newRow[i] === newRow[i - 1]) {\n                            this.score += newRow[i] * 2;\n                            if (newRow[i] * 2 === 2048) {\n                                win = true;\n                            }\n                            resultRow[resultRow.length - 1] = newRow[i] * 2;\n                            newRow[i] = 0;\n                        } else {\n                            resultRow.push(newRow[i]);\n                        }\n                    }\n\n                    while (resultRow.length < this.size) {\n                        resultRow.push(0);\n                    }\n                    for (let i = 0; i < this.size; i++) {\n                        const spot = this.getSpot(this.size - i - 1, y);\n                        if (resultRow[i] !== board[spot]) {\n                            moved = true;\n                        }\n                        board[spot] = resultRow[i];\n                    }\n                }\n                break;\n            default:\n                return;\n        }\n        this.board = board;\n\n        if (win) {\n            this.won = true;\n            const winListeners = this.winListeners;\n            for (let i = 0; i < winListeners.length; i++) {\n                winListeners[i](this.getGameState());\n            }\n        } else if (moved) {\n            this.generateNum(this.board, 1);\n            if (this.checkLose()) {\n                this.over = true;\n                const loseListeners = this.loseListeners;\n                for (let i = 0; i < loseListeners.length; i++) {\n                    loseListeners[i](this.getGameState());\n                }\n            } else if (moved) {\n                const moveListeners = this.moveListeners;\n                for (let i = 0; i < moveListeners.length; i++) {\n                    moveListeners[i](this.getGameState());\n                }\n            }\n        }\n\n    }\n\n    generateNum(board, amount) {\n        const openSpots = [];\n        for (let i = 0; i < board.length; i++) {\n            if (board[i] === 0) {\n                openSpots.push(i);\n            }\n        }\n        for (let i = 0; i < amount; i++) {\n            const rand = Math.floor(Math.random() * openSpots.length);\n            const spot = openSpots[rand];\n            const temp = openSpots[openSpots.length - 1]\n            openSpots[openSpots.length - 1] = spot;\n            openSpots[rand] = temp;\n            openSpots.pop();\n            board[spot] = (Math.random() <= this.twos) ? 2 : 4;\n\n        }\n    }\n\n    checkLose() {\n        const board = this.board;\n        for (let x = 0; x < this.size - 1; x++) {\n            for (let y = 0; y < this.size - 1; y++) {\n                const curr = this.getSpot(x, y);\n                const down = this.getSpot(x, y + 1);\n                const right = this.getSpot(x + 1, y);\n                if (board[curr] === 0 || board[curr] === board[down] || board[curr] === board[right]) {\n\n                    return false;\n                }\n            }\n        }\n        for (let x = 0; x < this.size; x++) {\n            const curr = this.getSpot(x, this.size - 1);\n            const right = this.getSpot(x + 1, this.size - 1);\n\n            if (board[curr] === 0 || board[curr] === board[right]) {\n\n                return false;\n            }\n        }\n        for (let y = 0; y < this.size; y++) {\n            const curr = this.getSpot(this.size - 1, y);\n            const down = this.getSpot(this.size - 1, y + 1);\n\n            if (board[curr] === 0 || board[curr] === board[down]) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    toString() {\n        const size = this.size;\n        const board = this.board;\n        let result = ``;\n        for (let i = 0; i < size; i++) {\n            for (let j = 0; j < size; j++) {\n                result += `[${(board[this.getSpot(j, i)] === 0) ? \" \" : board[this.getSpot(j, i)]}] `;\n            }\n            if (i !== size - 1) {\n                result += '\\n';\n            }\n        }\n\n        return result;\n    }\n\n    onMove(callback) {\n        this.moveListeners.push(callback);\n    }\n\n    onWin(callback) {\n        this.winListeners.push(callback);\n    }\n\n    onLose(callback) {\n        this.loseListeners.push(callback);\n    }\n\n    unregisterOnMove(callback) {\n        const idx = this.moveListeners.indexOf(callback);\n        this.moveListeners.splice(idx, 1);\n    }\n\n    unregisterOnWin(callback) {\n        const idx = this.winListeners.indexOf(callback);\n        this.winListeners.splice(idx, 1);\n    }\n\n    unregisterOnLose(callback) {\n        const idx = this.loseListeners.indexOf(callback);\n        this.loseListeners.splice(idx, 1);\n    }\n\n    getGameState() {\n        return {\n            board: this.board,\n            score: this.score,\n            won: this.won,\n            over: this.over\n        };\n    }\n\n    getSpot(x, y) {\n        return (y * this.size + x);\n    }\n\n\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}